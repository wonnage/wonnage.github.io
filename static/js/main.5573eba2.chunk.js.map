{"version":3,"sources":["assets/logo.jpeg","RSVPForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","RSVPForm","id","style","width","border","height","src","title","scrolling","Nav","currentPath","useLocation","pathname","to","className","undefined","App","logo","alt","path","exact","href","frameBorder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,mC,uMCE5B,SAASC,IACtB,OACE,4BACEC,GAAG,gBACHC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,OAAQ,SAChDC,IAAI,mDACJC,MAAM,OACNC,UAAU,OCGhB,SAASC,IACP,IAAMC,EAAcC,cAAcC,SAClC,OACE,6BACE,kBAAC,IAAD,CAAMC,GAAG,IAAIC,UAA2B,MAAhBJ,EAAsB,cAAWK,GAAzD,QAGA,kBAAC,IAAD,CACEF,GAAG,QACHC,UAA2B,UAAhBJ,EAA0B,cAAWK,GAFlD,QAMA,kBAAC,IAAD,CACEF,GAAG,YACHC,UAA2B,cAAhBJ,EAA8B,cAAWK,GAFtD,YAMA,kBAAC,IAAD,CACEF,GAAG,UACHC,UAA2B,YAAhBJ,EAA4B,cAAWK,GAFpD,WAiDSC,MAvCf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKF,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKR,IAAKW,IAAMH,UAAU,OAAOI,IAAI,UAEvC,kBAACT,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,GACnB,6BACE,2BACE,uBAAGC,KAAK,yCAAR,uEAKF,4BACEf,IAAI,gTACJH,MAAM,MACNE,OAAO,MACPiB,YAAY,IACZf,MAAM,UAIZ,kBAAC,IAAD,CAAOY,KAAK,SACV,6BACE,kBAACnB,EAAD,QAGJ,kBAAC,IAAD,CAAOmB,KAAK,aAAZ,YACA,kBAAC,IAAD,CAAOA,KAAK,WAAZ,cC7DUI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5573eba2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9937c7d8.jpeg\";","import React, { useState } from \"react\";\r\n\r\nexport default function RSVPForm() {\r\n  return (\r\n    <iframe\r\n      id=\"RSVPifyIFrame\"\r\n      style={{ width: \"100%\", border: \"none\", height: \"800px\" }}\r\n      src=\"https://emmavictor.app.rsvpify.com/?embed=1&js=1\"\r\n      title=\"rsvp\"\r\n      scrolling=\"no\"\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useLocation\r\n} from \"react-router-dom\";\r\nimport logo from \"./assets/logo.jpeg\";\r\nimport \"./App.css\";\r\nimport RSVPForm from \"./RSVPForm\";\r\n\r\nfunction Nav() {\r\n  const currentPath = useLocation().pathname;\r\n  return (\r\n    <nav>\r\n      <Link to=\"/\" className={currentPath === \"/\" ? \"active\" : undefined}>\r\n        Home\r\n      </Link>\r\n      <Link\r\n        to=\"/rsvp\"\r\n        className={currentPath === \"/rsvp\" ? \"active\" : undefined}\r\n      >\r\n        RSVP\r\n      </Link>\r\n      <Link\r\n        to=\"/registry\"\r\n        className={currentPath === \"/registry\" ? \"active\" : undefined}\r\n      >\r\n        Registry\r\n      </Link>\r\n      <Link\r\n        to=\"/photos\"\r\n        className={currentPath === \"/photos\" ? \"active\" : undefined}\r\n      >\r\n        Photos\r\n      </Link>\r\n    </nav>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"logo\" alt=\"logo\" />\r\n        </header>\r\n        <Nav />\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <div>\r\n              <p>\r\n                <a href=\"https://goo.gl/maps/ug2vGGb3RdvpTUGw5\">\r\n                  Fairview Crystal Springs 6605 Golf Course Dr, Burlingame, CA\r\n                  94010\r\n                </a>\r\n              </p>\r\n              <iframe\r\n                src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3163.3334651231103!2d-122.37649988468891!3d37.54720657980158!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x808f75301f4d62b3%3A0x8d1e448d66a0cd34!2sFairview%20Crystal%20Springs%20Ceremony%20Site!5e0!3m2!1sen!2sus!4v1581983865380!5m2!1sen!2sus\"\r\n                width=\"600\"\r\n                height=\"450\"\r\n                frameBorder=\"0\"\r\n                title=\"map\"\r\n              />\r\n            </div>\r\n          </Route>\r\n          <Route path=\"/rsvp\">\r\n            <div>\r\n              <RSVPForm />\r\n            </div>\r\n          </Route>\r\n          <Route path=\"/registry\">Registry</Route>\r\n          <Route path=\"/photos\">Photos</Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}