{"version":3,"sources":["assets/logo.jpeg","RSVPForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","RSVPForm","id","style","width","border","height","src","title","scrolling","Nav","currentPath","useLocation","pathname","to","className","undefined","App","logo","alt","path","exact","href","frameBorder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,mC,uMCE5B,SAASC,IACtB,OACE,4BACEC,GAAG,gBACHC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,OAAQ,SAChDC,IAAI,mDACJC,MAAM,OACNC,UAAU,OCGhB,SAASC,IACP,IAAMC,EAAcC,cAAcC,SAClC,OACE,6BACE,kBAAC,IAAD,CAAMC,GAAG,IAAIC,UAA2B,MAAhBJ,EAAsB,cAAWK,GAAzD,QAGA,kBAAC,IAAD,CACEF,GAAG,QACHC,UAA2B,UAAhBJ,EAA0B,cAAWK,GAFlD,QAMA,kBAAC,IAAD,CACEF,GAAG,YACHC,UAA2B,cAAhBJ,EAA8B,cAAWK,GAFtD,YAMA,kBAAC,IAAD,CACEF,GAAG,UACHC,UAA2B,YAAhBJ,EAA4B,cAAWK,GAFpD,WAiDSC,MAvCf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKF,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKR,IAAKW,IAAMH,UAAU,OAAOI,IAAI,UAEvC,kBAACT,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,GACnB,6BACE,2BACE,uBAAGC,KAAK,yCAAR,uEAKF,4BACEf,IAAI,gTACJH,MAAM,MACNE,OAAO,MACPiB,YAAY,IACZf,MAAM,UAIZ,kBAAC,IAAD,CAAOY,KAAK,SACV,6BACE,kBAACnB,EAAD,QAGJ,kBAAC,IAAD,CAAOmB,KAAK,aAAZ,YACA,kBAAC,IAAD,CAAOA,KAAK,WAAZ,cC7DUI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5573eba2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9937c7d8.jpeg\";","import React, { useState } from \"react\";\r\n\r\nexport default function RSVPForm() {\r\n  return (\r\n    <iframe\r\n      id=\"RSVPifyIFrame\"\r\n      style={{ width: \"100%\", border: \"none\", height: \"800px\" }}\r\n      src=\"https://emmavictor.app.rsvpify.com/?embed=1&js=1\"\r\n      title=\"rsvp\"\r\n      scrolling=\"no\"\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useLocation\n} from \"react-router-dom\";\nimport logo from \"./assets/logo.jpeg\";\nimport \"./App.css\";\nimport RSVPForm from \"./RSVPForm\";\n\nfunction Nav() {\n  const currentPath = useLocation().pathname;\n  return (\n    <nav>\n      <Link to=\"/\" className={currentPath === \"/\" ? \"active\" : undefined}>\n        Home\n      </Link>\n      <Link\n        to=\"/rsvp\"\n        className={currentPath === \"/rsvp\" ? \"active\" : undefined}\n      >\n        RSVP\n      </Link>\n      <Link\n        to=\"/registry\"\n        className={currentPath === \"/registry\" ? \"active\" : undefined}\n      >\n        Registry\n      </Link>\n      <Link\n        to=\"/photos\"\n        className={currentPath === \"/photos\" ? \"active\" : undefined}\n      >\n        Photos\n      </Link>\n    </nav>\n  );\n}\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"logo\" alt=\"logo\" />\n        </header>\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact>\n            <div>\n              <p>\n                <a href=\"https://goo.gl/maps/ug2vGGb3RdvpTUGw5\">\n                  Fairview Crystal Springs 6605 Golf Course Dr, Burlingame, CA\n                  94010\n                </a>\n              </p>\n              <iframe\n                src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3163.3334651231103!2d-122.37649988468891!3d37.54720657980158!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x808f75301f4d62b3%3A0x8d1e448d66a0cd34!2sFairview%20Crystal%20Springs%20Ceremony%20Site!5e0!3m2!1sen!2sus!4v1581983865380!5m2!1sen!2sus\"\n                width=\"600\"\n                height=\"450\"\n                frameBorder=\"0\"\n                title=\"map\"\n              />\n            </div>\n          </Route>\n          <Route path=\"/rsvp\">\n            <div>\n              <RSVPForm />\n            </div>\n          </Route>\n          <Route path=\"/registry\">Registry</Route>\n          <Route path=\"/photos\">Photos</Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}